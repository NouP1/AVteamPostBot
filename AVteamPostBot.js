const express = require('express');
const TelegramApi = require('node-telegram-bot-api');
const dayjs = require('dayjs');
const sequelize = require('./db.js');
const BuyerModel = require('./models/Buyer.js');
const CapModel = require('./models/Cap.js');
require('dotenv').config();
const cron = require('node-cron');
const moment = require('moment');
const axios = require('axios')
const { auth } = require('google-auth-library');
const { google } = require('googleapis');
const serviceAccount = require('./googleapikey.json');
const countryCodes = require('./country.js');
const affiliateNetworkMapping = require('./affneworks.js')

const app = express();
app.use(express.json());
const port = 3000;

const token = process.env.TOKEN;
const ApiKey = process.env.API_KEY;
const spreadsheetId = process.env.SPREADSHEETID;
const bot = new TelegramApi(token, { polling: true });

const channelAll = '-1002191506094';
const channelPasha = '-1002196076246';
const channelArtur = '-1002211371353';

const formatTimestamp = (timestamp) => {
    return dayjs.unix(timestamp).add(3, 'hour').format('YYYY-MM-DD HH:mm:ss');
};

function getCountryCode(country) {
    return countryCodes[country] || 'Unknown';
}

const transformOfferName = (offerName) => {
    const parts = offerName.split('|');
    if (parts.length >= 5) {
        return parts.slice(2, -2).map(part => part.trim()).join(' ');
    }
    return offerName;
};


const sendToChannelAll = async (data, RatingMessage, networkCaps) => {
    try {

        const message = `
First Dep üí∏:
ClickID: ${data.clickid}
Time: ${formatTimestamp(data.time)}
App: ${data.campaign_name}
GEO: ${data.country}
Offer: ${data.offer_name}
Network: ${data.affiliate_network_name}
Cap: ${networkCaps.countCap}/${networkCaps.fullCap}
Revenue: ${data.payout}

${RatingMessage}


`;

        await bot.sendMessage(channelAll, message);
        //await bot.sendMessage(channelAll, RatingMessage);
        console.log("–ö–æ–Ω–≤–µ—Ä—Å–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
    } catch (error) {
        console.log("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤ –∫–∞–Ω–∞–ª –∞–¥–º–∏–Ω–æ–≤", error)
    }
};


const sendToChannelNew = async (data, responsiblePerson, RatingMessage, networkCaps) => {

    try {
        const message = `
First Dep üí∏:
ClickID: ${data.clickid}
Time: ${formatTimestamp(data.time)}
App: ${data.campaign_name}
GEO: ${data.country}
Offer: ${data.offer_name}
Revenue: ${data.payout}
Cap: ${networkCaps.countCap}/${networkCaps.fullCap}
`
        if (responsiblePerson === 'Artur') {
            await bot.sendMessage(channelArtur, message);
            //await bot.sendMessage(channelAll, RatingMessage);
        }
        if (responsiblePerson === 'Pasha') {
            await bot.sendMessage(channelPasha, message);
            //await bot.sendMessage(channelAll, RatingMessage);
        }


        console.log("–ö–æ–Ω–≤–µ—Ä—Å–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª –¥–ª—è –∫–æ–º–∞–Ω–¥—ã")
        console.log("-------------------------------------------------")
    } catch (error) {
        console.log("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤ –∫–∞–Ω–∞–ª –∫–æ–º–∞–Ω–¥—ã", error)
    }
}

const formatedRatingMessage = async (postData, responsiblePerson) => {
    try {
        const [buyer, created] = await BuyerModel.findOrCreate({
            where: { nameBuyer: responsiblePerson },
            defaults: { nameBuyer: responsiblePerson, countRevenue: postData.payout, countFirstdeps: 1 }
        });

        if (!created) {
            buyer.countRevenue += postData.payout;
            buyer.countFirstdeps += 1;
            await buyer.save();
        }

        const buyers = await BuyerModel.findAll({
            order: [['countRevenue', 'DESC']]
        });

        const message = 'Buyers:\n' + buyers.map(b => `${b.nameBuyer} => $${b.countRevenue} / FD ${b.countFirstdeps}`).join('\n');
        return message
    } catch (error) {
        console.log("–û—à–∏–±–∫–∞ –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º \n" + error)
    }

};




async function getNetworkCap(PostDatanetworkName, PostDataofferName, Geo) {
    try {
        console.log(PostDataofferName)
        const authClient = auth.fromJSON(serviceAccount);
        authClient.scopes = ['https://www.googleapis.com/auth/spreadsheets.readonly'];
        await authClient.authorize();

        const sheetsApi = google.sheets({ version: 'v4', auth: authClient });

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
        const sheetsMetadata = await sheetsApi.spreadsheets.get({
            spreadsheetId: spreadsheetId,
        });

        const sheets = sheetsMetadata.data.sheets;
        if (!sheets || sheets.length === 0) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ª–∏—Å—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ.');
        }

        for (const sheet of sheets) {
            const sheetName = sheet.properties.title;

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ª–∏—Å—Ç–∞ (–¥–∏–∞–ø–∞–∑–æ–Ω A1:C –¥–ª—è Affiliate Network, Offers –∏ Cap)
            const response = await sheetsApi.spreadsheets.values.get({
                spreadsheetId: spreadsheetId,
                range: `${sheetName}!A1:E`,  // –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É —Å —É—á—ë—Ç–æ–º –Ω–æ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
            });

            const rows = response.data.values;

            if (rows && rows.length > 0) {
                // –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å–µ—Ç–∏
                const networksRow = rows.find(row =>
                    row[0] && row[1] && row[2] &&
                    row[0].trim().toLowerCase() === Geo.trim().toLowerCase() &&
                    row[1].trim().toLowerCase() === PostDatanetworkName.trim().toLowerCase() &&
                    row[2].trim().toLowerCase() === PostDataofferName.trim().toLowerCase()
                );
                console.log("-------------------------------------------------");
                console.log('–ù–∞–π–¥–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ Google Tables');
                console.log(networksRow)
                console.log("-------------------------------------------------");

                if (networksRow) {
                    // –ò—â–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î –ø–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∫–µ –∏ –æ—Ñ—Ñ–µ—Ä—É
                    let cap = await CapModel.findOne({
                        where: {
                            Geo: networksRow[0],
                            nameCap: networksRow[1],  // Affiliate Network
                            offerName: networksRow[2]  // Offers
                        }
                    });

                    if (!cap) {
                        // –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –µ—ë
                        cap = await CapModel.create({
                            Geo: networksRow[0],
                            nameCap: networksRow[1],
                            offerName: networksRow[2],
                            countCap: 1,
                            fullCap: networksRow[3]
                        });
                        console.log("-------------------------------------------------");
                        console.log(`!!–°–æ–∑–¥–∞—é –∑–∞–ø–∏—Å—å –≤ –ë–î –¥–ª—è  ${Geo} ${PostDatanetworkName} ${PostDataofferName} !!`);
                        console.log("-------------------------------------------------");
                    } else {

                        console.log("-------------------------------------------------");
                        console.log(`!!–û–±–Ω–æ–≤–ª—è—é –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ë–î –¥–ª—è ${Geo} ${PostDatanetworkName} ${PostDataofferName} !!`);
                        console.log("-------------------------------------------------");

                        cap.countCap += 1;
                        cap.fullCap = networksRow[3];

                        if (networksRow[4] === 'TRUE') {
                            cap.countCap = 0;
                        }

                        if (networksRow[3] === '0' || networksRow[3] === undefined) {
                            cap.fullCap = 0;
                            cap.countCap = 0;
                            console.log("-------------------------------------------------");
                            console.log(`!!–û–±–Ω—É–ª–∏–ª –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è ${Geo} ${PostDatanetworkName} ${PostDataofferName} !!`);
                            console.log("-------------------------------------------------");
                        }

                        await cap.save();
                    }

                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ Cap
                    return {
                        countCap: cap.countCap,
                        fullCap: cap.fullCap
                    };
                } else {
                    // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Google –¢–∞–±–ª–∏—Ü–µ
                    console.log("-------------------------------------------------------------------------------------------------");
                    console.log(`–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Google –¢–∞–±–ª–∏—Ü–µ –¥–ª—è –≥–µ–æ ${Geo} –ø–∞—Ä—Ç–Ω–µ—Ä–∫–∏ ${PostDatanetworkName} –∏ –æ—Ñ—Ñ–µ—Ä–∞ ${PostDataofferName}. –î–æ–±–∞–≤–ª—è—é –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –ë–î.`);
                    console.log("-------------------------------------------------------------------------------------------------");
                    // –ò—â–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î –ø–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∫–µ –∏ –æ—Ñ—Ñ–µ—Ä—É
                    let cap = await CapModel.findOne({
                        where: {
                            nameCap: PostDatanetworkName,
                            offerName: PostDataofferName
                        }
                    });

                    if (!cap) {
                        // –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç –≤ –ë–î, —Å–æ–∑–¥–∞—ë–º –µ—ë —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                        cap = await CapModel.create({
                            nameCap: PostDatanetworkName,
                            offerName: PostDataofferName,
                            countCap: 0,  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0 –¥–ª—è countCap
                            fullCap: 0    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0 –¥–ª—è fullCap
                        });
                        console.log("-------------------------------------------------");
                        console.log(`!!–°–æ–∑–¥–∞–ª –∑–∞–ø–∏—Å—å —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∫–∞–ø—ã –¥–ª—è  ${Geo} ${PostDatanetworkName} –∏ ${PostDataofferName}!!`);
                        console.log("-------------------------------------------------");
                    } else {
                        cap.countCap = 0;
                        cap.fullCap = 0;
                        await cap.save()
                        console.log("-------------------------------------------------");
                        console.log(`!!–ó–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è ${Geo} ${PostDatanetworkName} –∏ ${PostDataofferName} –æ–±–Ω—É–ª—è—é –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–ø—ã!!`);
                        console.log("-------------------------------------------------");
                    }

                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∫–∞–ø—ã
                    return {
                        countCap: cap.countCap,
                        fullCap: cap.fullCap
                    };
                }
            }
        }
        throw new Error(`–î–∞–Ω–Ω—ã–µ –¥–ª—è ${PostDatanetworkName} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`);

    } catch (error) {
        console.error('Error getting sheet data:', error);
        throw error;
    }
}



const resetRevenueCount = async () => {
    try {
        await BuyerModel.destroy({ where: {} });
        console.log('–°—á–µ—Ç—á–∏–∫–∏ –≤—ã–ø–ª–∞—Ç —Å–±—Ä–æ—à–µ–Ω—ã');
    } catch (error) {
        console.error('Error resetting count revenue:', error);
    }
};



const postbackQueue = [];
let isProcessing = false; // –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ —Ç–æ, –∏–¥–µ—Ç –ª–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏

// // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–±–µ–∫–∞
const processPostback = async (postData) => {
    try {
        if (postData.status !== 'sale' && postData.status !== 'first_dep') {
            return 'Postback received, but status not relevant';
        }

        if (affiliateNetworkMapping[postData.affiliate_network_name]) {
            postData.affiliate_network_name = affiliateNetworkMapping[postData.affiliate_network_name];
        }

        postData.payout = Math.floor(parseFloat(postData.payout));
        postData.offer_name = transformOfferName(postData.offer_name);
        const offerParts = postData.campaign_name.split('|');
        const responsiblePerson = offerParts[offerParts.length - 1].trim();
        const geo = getCountryCode(postData.country)
        const networkCaps = await getNetworkCap(postData.affiliate_network_name, postData.offer_name, geo)
        const RatingMessage = await formatedRatingMessage(postData, responsiblePerson);


        await Promise.allSettled([
            sendToChannelNew(postData, responsiblePerson, RatingMessage, networkCaps),
            sendToChannelAll(postData, RatingMessage, networkCaps),
            (async () => {
                try {
                    const response = await axios.post('http://185.81.115.100:3100/api/webhook/postback', postData);

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ —Ä–∞–≤–µ–Ω 200
                    if (response.status === 200) {
                        console.log("-------------------------------------------------");
                        console.log('–ü–æ—Å—Ç–±–µ–∫ —É–¥–∞—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ AVteamCRM!');
                        console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data); // –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        console.log("-------------------------------------------------");
                    } else {
                        console.error('–û—à–∏–±–∫–∞: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞', response.status);
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–µ—Ä:', error);
                    console.log("-------------------------------------------------");
                    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–µ—Ä!');
                    console.log("-------------------------------------------------");
                }
            })()
        ]);
        return 'Postback processed';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ postback:', error);
        throw new Error('Internal Server Error');
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –ø–æ—Å—Ç–±–µ–∫–æ–≤
const processQueue = async () => {
    if (isProcessing) return; // –ï—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞, –≤—ã—Ö–æ–¥–∏–º
    isProcessing = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏

    while (postbackQueue.length > 0) {
        const postData = postbackQueue.shift(); // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        await processPostback(postData); // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç–±–µ–∫
        await new Promise(resolve => setTimeout(resolve, 4000)); // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 4 —Å–µ–∫—É–Ω–¥—ã
    }

    isProcessing = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
};


app.get('/postback', async (req, res) => {
    try {
        const postData = {
            clickid,
            date,
            time,
            campaign_name,
            country,
            offer_name,
            affiliate_network_name,
            payout
        } = req.query;
        console.log(req.query)

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å
        postbackQueue.push(postData);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
        if (!isProcessing) {
            processQueue();
        }

        res.status(200).send('Postback –ø–æ–ª—É—á–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è postback –≤ –æ—á–µ—Ä–µ–¥—å:', error);
        res.status(500).send('Internal Server Error');
    }
});
cron.schedule('0 21 * * *', () => {
    const now = moment().format('YYYY-MM-DD HH:mm:ss')
    console.log('Running resetRevenueCount at 00:00');
    resetRevenueCount();
    console.log(now + '\n-------------------------------------------------');
});

app.post('/update', async (req, res) => {
    try {
        const { geo, networkName, offerName, newCapValue } = req.body;
        console.log('-------------------------------------------------\n!–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ Google Tables: CAP!\n')
        console.log(req.body)
        console.log('\n-------------------------------------------------')

        if (!geo || !networkName || !newCapValue || !offerName) {
            return res.status(400).json({ message: 'Missing required fields' });
        }

        const cap = await CapModel.findOne({ where: { Geo: geo, nameCap: networkName, offerName: offerName } });
        if (cap) {
            cap.fullCap = newCapValue;   // –û–±–Ω–æ–≤–ª—è–µ–º fullCap
            await cap.save();

            res.status(200).json({ message: 'Cap updated successfully' });
        } else {
            res.status(404).json({ message: 'Network not found' });
        }
    } catch (error) {
        res.status(500).json({ message: 'Error updating cap', error });
    }
});

app.post('/reset', async (req, res) => {
    try {
        const { geo, networkName, offerName, resetCap } = req.body;
        console.log('-------------------------------------------------\n!–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ Google Tables: RESET!\n')
        console.log(req.body)
        console.log('\n-------------------------------------------------')

        if (!geo || !networkName || !offerName || !resetCap) {
            return res.status(400).json({ message: 'Missing required fields' });
        }

      
        const cap = await CapModel.findOne({ where: { Geo: geo, nameCap: networkName, offerName: offerName } });

        if (cap && resetCap) {
            cap.countCap = 0;
            await cap.save();
            res.status(200).json({ message: 'Cap updated successfully' });
        } else {
            res.status(404).json({ message: 'Network not found' });
        }
    } catch (error) {
        res.status(500).json({ message: 'Error updating cap', error });
    }
});

const startServer = async () => {
    try {
        await sequelize.authenticate();
        await sequelize.sync();
        console.log('Connected to database...');


        app.listen(port, () => {
            console.log(`Server is running on port ${port}`);
        });
    } catch (error) {
        console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î', error);
    }
};

startServer();
